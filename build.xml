<project name="vufind-browse-handler" default="build" basedir=".">

  <property name="builddir" location="build"/>
  <property name="build.sysclasspath" value="last"/>
  <property name="testdir" value="${builddir}/tests"/>
  <property name="testoutputdir" value="${testdir}/output"/>
  <property name="testdata.dir" value="tests/data"/>
  <property name="authdata.dir" value="${testdata.dir}/auth"/>
  <property name="bibdata.dir" value="${testdata.dir}/bib"/>
  <property name="vufind.dir" value="/usr/local/vufind"/>
  <property name="absolute.vufind.dir" location="${vufind.dir}"/>
  <property name="solr.solr.home" value="${absolute.vufind.dir}/solr/vufind"/>
  <!-- The solr.install.dir property was added to work around an issue in the Solr 9.1 test suite;
       it can probably be safely removed once VuFind upgrades to Solr 9.2 or higher. -->
  <property name="solr.install.dir" value="${absolute.vufind.dir}/solr/vendor"/>
  <property name="java.compat.version" value="1.8"/>
  <property name="ant.build.javac.source" value="1.8"/>
  <property name="ant.build.javac.target" value="1.8"/>

  <path id="classpath">
    <pathelement location="${builddir}/common"/>
    <fileset dir="${builddir}/deps/">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="libs">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="tests/lib">
      <include name="**/*.jar"/>
    </fileset>
    <!-- For Solr 8 and below: -->
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/solr/vendor/contrib/analysis-extras">
      <include name="**/*.jar"/>
    </fileset>
    <!-- For Solr 9 and above: -->
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/solr/vendor/modules/analysis-extras">
      <include name="**/*.jar"/>
    </fileset>
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/solr/vendor/dist">
      <include name="**/*.jar"/>
    </fileset>
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/solr/vendor/server/solr-webapp/webapp/WEB-INF/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/import/lib">
      <include name="**/*.jar"/>
    </fileset>
    <!-- Needed for building tests that invoke Solr -->
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/solr/vendor/server/lib">
      <include name="**/*.jar"/>
    </fileset>
    <!-- Pick up SQLite JDBC driver from VuFind dist-->
    <fileset erroronmissingdir="false" dir="${absolute.vufind.dir}/solr/vufind/jars">
      <include name="sqlite*.jar"/>
    </fileset>
  </path>
  <!-- Can be useful for debugging -->
  <!-- Must comment out before pushing, as CI environment will not have run setup before all paths are referenced -->
  <!-- <pathconvert property="classpathProp" refid="classpath"/> -->

  <target name="setup">
    <mkdir dir="${builddir}"/>
    <mkdir dir="${builddir}/deps"/>
    <mkdir dir="${builddir}/bundled-deps"/>
    <antcall target="setup-solr-deps"/>
  </target>

  <target name="setup-solr-deps">
    <available file="${absolute.vufind.dir}/solr/jetty/webapps/solr.war" property="solr.war.present"/>
    <antcall target="unpack-solr-war"/>
  </target>

  <target name="unpack-solr-war" if="solr.war.present">
    <unwar src="${absolute.vufind.dir}/solr/jetty/webapps/solr.war" dest="${builddir}/deps/"/>
  </target>

  <target name="build" depends="clean, setup, build-common, build-handler, build-indexing">
    <!-- Can be useful for debugging -->
    <!-- <pathconvert property="classpathProp" refid="classpath"/> -->
    <!-- <echo>Classpath: ${classpathProp}</echo> -->
  </target>

  <target name="build-common">
    <mkdir dir="${builddir}/common"/>
    <javac debug="on" srcdir="common/java" destdir="${builddir}/common">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
    </javac>
    <exec executable="sh" output="${builddir}/common/VERSION">
      <arg value="-c"/>
      <arg value="which git >/dev/null 2>&amp;1 &amp;&amp; git log --oneline -1"/>
    </exec>
  </target>


  <target name="build-handler">
    <mkdir dir="${builddir}/browse-handler"/>
    <javac debug="on" srcdir="browse-handler/java" destdir="${builddir}/browse-handler">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:unchecked"/>
      <!-- sometimes useful for library or refective programming failures -->
      <!-- <compilerarg value="-Xdiags:verbose"/> -->
    </javac>
  </target>

  <target name="build-indexing">
    <mkdir dir="${builddir}/browse-indexing"/>
    <javac debug="on" srcdir="browse-indexing/" destdir="${builddir}/browse-indexing">
      <classpath refid="classpath"/>
      <compilerarg value="-Xlint"/>
    </javac>
  </target>


  <target name="clean">
    <delete dir="${builddir}"/>
    <delete file="browse-handler.jar"/>
    <delete file="browse-indexing.jar"/>
  </target>

  <target name="bundledeps" if="bundle.deps">
    <copy todir="${builddir}/bundled-deps">
      <fileset dir="libs">
        <include name="icu4j-49.1.jar"/>
        <include name="sqlitejdbc-v053.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="jars" depends="build,bundledeps">
    <jar destfile="browse-handler.jar">
      <fileset dir="${builddir}/browse-handler/"/>
      <fileset dir="${builddir}/common/"/>
    </jar>
    <jar destfile="browse-indexing.jar">
      <fileset dir="${builddir}/browse-indexing/"/>
      <fileset dir="${builddir}/common/"/>
      <zipgroupfileset dir="${builddir}/deps/" includes="**/lucene-core*.jar"/>
      <zipgroupfileset dir="libs">
        <include name="commons-codec-1.5.jar"/>
      </zipgroupfileset>
      <zipgroupfileset dir="${builddir}/bundled-deps" includes="*.jar"/>
    </jar>
  </target>

    <!-- =================================
          target: setup-test-cores

          Put known test data into Solr cores:
          start Solr,
          add authority and biblographic data,
          generate alphabetical indexes,
          stop Solr
         ================================= -->
    <!-- Currently working only for UNIX flavors -->
    <target name="setup-test-cores"
         description="Set up test Solr cores with some known test data">
      <exec executable="${absolute.vufind.dir}/solr.sh">
        <env key="VUFIND_HOME" value="${absolute.vufind.dir}"/>
        <arg value="start"/>
      </exec>
      <!-- Alternately, could exec ${absolute.vufind.dir}/harvest/batch-import-marc-auth.sh -->
      <apply executable="${absolute.vufind.dir}/import-marc-auth.sh">
        <env key="VUFIND_HOME" value="${absolute.vufind.dir}"/>
        <fileset dir="${authdata.dir}">
          <include name="**/*.xml"/>
        </fileset>
        <!--
            Would like to also use authority test records under the VuFind
            test data, but they are missing the expected id fields.
          -->
        <!--
        <fileset dir="${absolute.vufind.dir}/tests/data/authority">
          <include name="**/*.mrc"/>
        </fileset>
        -->
      </apply>
      <apply executable="${absolute.vufind.dir}/import-marc.sh">
        <env key="VUFIND_HOME" value="${absolute.vufind.dir}"/>
        <fileset dir="${bibdata.dir}">
          <include name="**/*.xml"/>
        </fileset>
        <fileset dir="${absolute.vufind.dir}/tests/data">
          <include name="**/*.mrc"/>
        </fileset>
      </apply>
      <exec executable="${absolute.vufind.dir}/index-alphabetic-browse.sh">
        <env key="VUFIND_HOME" value="${absolute.vufind.dir}"/>
      </exec>
      <!-- Stop Solr so that cores unlock and unit tests can access directly -->
      <exec executable="${absolute.vufind.dir}/solr.sh">
        <env key="VUFIND_HOME" value="${absolute.vufind.dir}"/>
        <arg value="stop"/>
      </exec>
    </target>

  <!-- =================================
          target: test-main
         ================================= -->
    <target name="test-main"
      description="Run tests, assumes build is current and test cores are set up">
      <mkdir dir="${testdir}"/>
      <mkdir dir="${testoutputdir}"/>
      <mkdir dir="${testdir}/report"/>
      <javac fork="true" debug="on" srcdir="tests/" destdir="${testdir}"
           classpath="tests/lib/*:${toString:classpath}:${builddir}/browse-handler">
        <compilerarg line="-encoding UTF-8" />
      </javac>

      <junit showoutput="yes" fork="true" haltonfailure="on">
        <sysproperty key="absolute.vufind.dir" value="${absolute.vufind.dir}" />
        <sysproperty key="solr.solr.home" value="${solr.solr.home}" />
        <sysproperty key="solr.install.dir" value="${solr.install.dir}" />
        <jvmarg value="-Dfile.encoding=UTF-8" />
        <classpath>
          <pathelement location="tests/lib/junit-4.11.jar"/>
          <pathelement location="tests/lib/*"/>
          <pathelement location="${testdir}"/>
          <pathelement location="${builddir}/browse-handler"/>
          <pathelement path="${toString:classpath}"/>
        </classpath>
        <!-- formatter type="plain" usefile="false"/-->
        <batchtest todir="${testoutputdir}">
          <fileset dir="tests">
            <include name="**/*.java"/>
          </fileset>
          <formatter type="xml" usefile="yes"/>
          <formatter type="plain" usefile="yes"/>
          <formatter type="brief" usefile="no"/>
        </batchtest>
      </junit>

      <junitreport todir="${testdir}/report">
        <fileset dir="${testoutputdir}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${testdir}/report"/>
      </junitreport>
      <echo message="JUnit reports available in ${testdir}/report">
      </echo>

    </target>

  <!-- =================================
          target: test
         ================================= -->
    <target name="test" depends="build, setup-test-cores"
      description="Run tests after build and setting up the test cores">
        <antcall target="test-main"/>
    </target>

  <!-- =================================
          target: test-skip-setup
         ================================= -->
    <target name="test-skip-setup" depends="build"
      description="Run tests after build, assumes test cores are already set up">
        <antcall target="test-main"/>
    </target>

  </project>
